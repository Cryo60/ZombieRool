
/*
 *    MCreator note: This file will be REGENERATED on each build.
 */
package net.mcreator.zombierool.init;

import net.minecraftforge.registries.RegistryObject;
import net.minecraftforge.registries.ForgeRegistries;
import net.minecraftforge.registries.DeferredRegister;
import net.minecraftforge.fml.common.Mod;
import net.minecraftforge.eventbus.api.SubscribeEvent;
import net.minecraftforge.client.event.RegisterColorHandlersEvent;
import net.minecraftforge.api.distmarker.Dist;

import net.minecraft.world.level.block.Block;

import net.mcreator.zombierool.block.ZombiePassBlock;
import net.mcreator.zombierool.block.WunderfizzAntenneBlock;
import net.mcreator.zombierool.block.WhitebrickWallBlock;
import net.mcreator.zombierool.block.WhitebrickStairsBlock;
import net.mcreator.zombierool.block.WhitebrickSlabBlock;
import net.mcreator.zombierool.block.WhitebrickBlock;
import net.mcreator.zombierool.block.WetDirtBlock;
import net.mcreator.zombierool.block.WeirdGrassBlock;
import net.mcreator.zombierool.block.UltimaReceptorBlock;
import net.mcreator.zombierool.block.UltimaActivatorBlock;
import net.mcreator.zombierool.block.TraitorBlock;
import net.mcreator.zombierool.block.TinySkullBlock;
import net.mcreator.zombierool.block.TinyFlameBlock;
import net.mcreator.zombierool.block.TinyCandlesBlock;
import net.mcreator.zombierool.block.TinyBonesBlock;
import net.mcreator.zombierool.block.TileBlockBlock;
import net.mcreator.zombierool.block.SuspiciousHauntedPlanksBlock;
import net.mcreator.zombierool.block.StorageBoxBlock;
import net.mcreator.zombierool.block.SteelSlateSlabBlock;
import net.mcreator.zombierool.block.SteelSlateBlock;
import net.mcreator.zombierool.block.SquarefloorSlabBlock;
import net.mcreator.zombierool.block.SquarefloorBlock;
import net.mcreator.zombierool.block.SpiderWebBlock;
import net.mcreator.zombierool.block.SpawnerZombieBlock;
import net.mcreator.zombierool.block.SpawnerDogBlock;
import net.mcreator.zombierool.block.SpawnerCrawlerBlock;
import net.mcreator.zombierool.block.SoulLichenBlock;
import net.mcreator.zombierool.block.SorchedGrassBlock;
import net.mcreator.zombierool.block.ShadowTilesBlock;
import net.mcreator.zombierool.block.ShadowBricksBlock;
import net.mcreator.zombierool.block.SewerbrickWallBlock;
import net.mcreator.zombierool.block.SewerbrickStairsBlock;
import net.mcreator.zombierool.block.SewerbrickSlabBlock;
import net.mcreator.zombierool.block.SewerbrickBlock;
import net.mcreator.zombierool.block.ScorchedGrassSlabBlock;
import net.mcreator.zombierool.block.ScorchedDirtSlabBlock;
import net.mcreator.zombierool.block.ScorchedDirtBlock;
import net.mcreator.zombierool.block.RetroGravelBlock;
import net.mcreator.zombierool.block.RetroGrassSlabBlock;
import net.mcreator.zombierool.block.RetroGrassBlock;
import net.mcreator.zombierool.block.RetroGlassSlabBlock;
import net.mcreator.zombierool.block.RetroGlassPaneBlock;
import net.mcreator.zombierool.block.RetroGlassBlock;
import net.mcreator.zombierool.block.RetroCobblestoneWallBlock;
import net.mcreator.zombierool.block.RetroCobblestoneStairsBlock;
import net.mcreator.zombierool.block.RetroCobblestoneSlabBlock;
import net.mcreator.zombierool.block.RetroCobblestoneBlock;
import net.mcreator.zombierool.block.RetroBrickWallBlock;
import net.mcreator.zombierool.block.RetroBrickStairBlock;
import net.mcreator.zombierool.block.RetroBrickSlabBlock;
import net.mcreator.zombierool.block.RetroBrickBlock;
import net.mcreator.zombierool.block.RestrictBlock;
import net.mcreator.zombierool.block.RawObscuriumBlock;
import net.mcreator.zombierool.block.PurplewallpaperBlock;
import net.mcreator.zombierool.block.PunchPackCorpseBlock;
import net.mcreator.zombierool.block.PunchPackBlock;
import net.mcreator.zombierool.block.PowerSwitchBlock;
import net.mcreator.zombierool.block.PlayerSpawnerBlock;
import net.mcreator.zombierool.block.PlanksblackBlock;
import net.mcreator.zombierool.block.PlanksYellowStairsBlock;
import net.mcreator.zombierool.block.PlanksYellowFenceBlock;
import net.mcreator.zombierool.block.PlanksYellowBlock;
import net.mcreator.zombierool.block.PlanksWhiteStairsBlock;
import net.mcreator.zombierool.block.PlanksWhiteFenceBlock;
import net.mcreator.zombierool.block.PlanksWhiteBlock;
import net.mcreator.zombierool.block.PlanksSilverStairsBlock;
import net.mcreator.zombierool.block.PlanksSilverFenceBlock;
import net.mcreator.zombierool.block.PlanksSilverBlock;
import net.mcreator.zombierool.block.PlanksRedStairsBlock;
import net.mcreator.zombierool.block.PlanksRedFenceBlock;
import net.mcreator.zombierool.block.PlanksRedBlock;
import net.mcreator.zombierool.block.PlanksPinkStairsBlock;
import net.mcreator.zombierool.block.PlanksPinkFenceBlock;
import net.mcreator.zombierool.block.PlanksPinkBlock;
import net.mcreator.zombierool.block.PlanksOrangeStairsBlock;
import net.mcreator.zombierool.block.PlanksOrangeFenceBlock;
import net.mcreator.zombierool.block.PlanksOrangeBlock;
import net.mcreator.zombierool.block.PlanksGrayStairsBlock;
import net.mcreator.zombierool.block.PlanksGrayFenceBlock;
import net.mcreator.zombierool.block.PlanksGrayBlock;
import net.mcreator.zombierool.block.PlanksCyanStairsBlock;
import net.mcreator.zombierool.block.PlanksCyanFenceBlock;
import net.mcreator.zombierool.block.PlanksCyanBlock;
import net.mcreator.zombierool.block.PlanksBrownStairsBlock;
import net.mcreator.zombierool.block.PlanksBrownFenceBlock;
import net.mcreator.zombierool.block.PlanksBrownBlock;
import net.mcreator.zombierool.block.PlanksBlueStairsBlock;
import net.mcreator.zombierool.block.PlanksBlueFenceBlock;
import net.mcreator.zombierool.block.PlanksBlueBlock;
import net.mcreator.zombierool.block.PlanksBlackStairsBlock;
import net.mcreator.zombierool.block.PlanksBlackFenceBlock;
import net.mcreator.zombierool.block.PermafrostIceBlock;
import net.mcreator.zombierool.block.PermafrostGrassBlock;
import net.mcreator.zombierool.block.PerksLowerBlock;
import net.mcreator.zombierool.block.PerfectedGraniteBlock;
import net.mcreator.zombierool.block.PerfectedDioriteBlock;
import net.mcreator.zombierool.block.PerfectedAndesitBlock;
import net.mcreator.zombierool.block.PerfectGraniteBlock;
import net.mcreator.zombierool.block.PerfectDioriteBlock;
import net.mcreator.zombierool.block.PerfectAndesitBlock;
import net.mcreator.zombierool.block.PathBlock;
import net.mcreator.zombierool.block.OpaqueLeavesBlock;
import net.mcreator.zombierool.block.OmegaReceptorBlock;
import net.mcreator.zombierool.block.OmegaActivatorBlock;
import net.mcreator.zombierool.block.OldPlanksStairsBlock;
import net.mcreator.zombierool.block.OldPlanksFenceBlock;
import net.mcreator.zombierool.block.OldPlanksBlock;
import net.mcreator.zombierool.block.OldMossyCobblestoneBlock;
import net.mcreator.zombierool.block.OldCobblestoneWallBlock;
import net.mcreator.zombierool.block.OldCobblestoneStairsBlock;
import net.mcreator.zombierool.block.OldCobblestoneSlabBlock;
import net.mcreator.zombierool.block.OldCobblestoneBlock;
import net.mcreator.zombierool.block.ObstacleDoorBlock;
import net.mcreator.zombierool.block.ObscuriumBlock;
import net.mcreator.zombierool.block.NotHauntedGlassBlock;
import net.mcreator.zombierool.block.MysteryBoxBlock;
import net.mcreator.zombierool.block.MudBlock;
import net.mcreator.zombierool.block.Mud2Block;
import net.mcreator.zombierool.block.ModernFurnaceBlock;
import net.mcreator.zombierool.block.MeshBlock;
import net.mcreator.zombierool.block.MachineBlockBlock;
import net.mcreator.zombierool.block.LimitBlock;
import net.mcreator.zombierool.block.IronStairsBlock;
import net.mcreator.zombierool.block.IronSlabsBlock;
import net.mcreator.zombierool.block.HauntedWindowBlock;
import net.mcreator.zombierool.block.HauntedPlanksBlock;
import net.mcreator.zombierool.block.HauntedGlassBlock;
import net.mcreator.zombierool.block.GlassTintedSlabBlock;
import net.mcreator.zombierool.block.GlassTintedPaneBlock;
import net.mcreator.zombierool.block.GlassTintedBlock;
import net.mcreator.zombierool.block.GlassSteelSlabBlock;
import net.mcreator.zombierool.block.GlassSteelPaneBlock;
import net.mcreator.zombierool.block.GlassSteelBlock;
import net.mcreator.zombierool.block.FelBricksBlock;
import net.mcreator.zombierool.block.EyeOakBlock;
import net.mcreator.zombierool.block.EmptymysteryboxBlock;
import net.mcreator.zombierool.block.DerWunderfizzUpperBlock;
import net.mcreator.zombierool.block.DerWunderfizzBlock;
import net.mcreator.zombierool.block.DefenseDoorOpenedBlock;
import net.mcreator.zombierool.block.DefenseDoorBlock;
import net.mcreator.zombierool.block.DecoStoneBlock;
import net.mcreator.zombierool.block.DecoStone2WallBlock;
import net.mcreator.zombierool.block.DecoStone2StairsBlock;
import net.mcreator.zombierool.block.DecoStone2SlabBlock;
import net.mcreator.zombierool.block.DecoStone2Block;
import net.mcreator.zombierool.block.DecoPlanksStairsBlock;
import net.mcreator.zombierool.block.DecoPlanksSlabBlock;
import net.mcreator.zombierool.block.DecoPlanksFenceBlock;
import net.mcreator.zombierool.block.DecoPlanksBlock;
import net.mcreator.zombierool.block.DecoGrassBlock;
import net.mcreator.zombierool.block.DecoFarmlandBlock;
import net.mcreator.zombierool.block.DecoDirtBlock;
import net.mcreator.zombierool.block.DarkbrickvariationBlock;
import net.mcreator.zombierool.block.DarkbrickWallBlock;
import net.mcreator.zombierool.block.DarkbrickStairsBlock;
import net.mcreator.zombierool.block.DarkbrickSlabBlock;
import net.mcreator.zombierool.block.DarkbrickBlock;
import net.mcreator.zombierool.block.CrackedShadowedTilesBlock;
import net.mcreator.zombierool.block.CrackedShadowedBrickBlock;
import net.mcreator.zombierool.block.CobbledAndStonedBlock;
import net.mcreator.zombierool.block.CarvedStoneBlock;
import net.mcreator.zombierool.block.CarvedSlateBlock;
import net.mcreator.zombierool.block.BuyWallWeaponBlock;
import net.mcreator.zombierool.block.BrickStoneWallBlock;
import net.mcreator.zombierool.block.BrickStoneStairsBlock;
import net.mcreator.zombierool.block.BrickStoneSlabBlock;
import net.mcreator.zombierool.block.BrickStoneBlock;
import net.mcreator.zombierool.block.BrickSteelWallBlock;
import net.mcreator.zombierool.block.BrickSteelStairsBlock;
import net.mcreator.zombierool.block.BrickSteelSlabBlock;
import net.mcreator.zombierool.block.BrickSteelBlock;
import net.mcreator.zombierool.block.BrickSlateWallBlock;
import net.mcreator.zombierool.block.BrickSlateStairsBlock;
import net.mcreator.zombierool.block.BrickSlateSlabBlock;
import net.mcreator.zombierool.block.BrickSlateBlock;
import net.mcreator.zombierool.block.BrickIronWallBlock;
import net.mcreator.zombierool.block.BrickIronStairBlock;
import net.mcreator.zombierool.block.BrickIronSlabBlock;
import net.mcreator.zombierool.block.BrickIronBlock;
import net.mcreator.zombierool.block.BrickGraniteWallBlock;
import net.mcreator.zombierool.block.BrickGraniteStairBlock;
import net.mcreator.zombierool.block.BrickGraniteSlabBlock;
import net.mcreator.zombierool.block.BrickGraniteBlock;
import net.mcreator.zombierool.block.BlackPumpkinBlock;
import net.mcreator.zombierool.block.BlackIronFenceBlock;
import net.mcreator.zombierool.block.BlackIronDoorBlock;
import net.mcreator.zombierool.block.BlackDirtBlock;
import net.mcreator.zombierool.block.BlackCoarsedDirtBlock;
import net.mcreator.zombierool.block.BetaReceptorBlock;
import net.mcreator.zombierool.block.BetaActivatorBlock;
import net.mcreator.zombierool.block.BalsaticStoneWallBlock;
import net.mcreator.zombierool.block.BalsaticStoneStairBlock;
import net.mcreator.zombierool.block.BalsaticStoneSlabBlock;
import net.mcreator.zombierool.block.BalsaticStoneBlock;
import net.mcreator.zombierool.block.AmmoCrateBlock;
import net.mcreator.zombierool.block.AlphaReceptorBlock;
import net.mcreator.zombierool.block.AlphaActivatorBlock;
import net.mcreator.zombierool.block.ActivatorBlock;
import net.mcreator.zombierool.ZombieroolMod;

public class ZombieroolModBlocks {
	public static final DeferredRegister<Block> REGISTRY = DeferredRegister.create(ForgeRegistries.BLOCKS, ZombieroolMod.MODID);
	public static final RegistryObject<Block> PATH = REGISTRY.register("path", () -> new PathBlock());
	public static final RegistryObject<Block> DEFENSE_DOOR = REGISTRY.register("defense_door", () -> new DefenseDoorBlock());
	public static final RegistryObject<Block> STORAGE_BOX = REGISTRY.register("storage_box", () -> new StorageBoxBlock());
	public static final RegistryObject<Block> LIMIT = REGISTRY.register("limit", () -> new LimitBlock());
	public static final RegistryObject<Block> DEFENSE_DOOR_OPENED = REGISTRY.register("defense_door_opened", () -> new DefenseDoorOpenedBlock());
	public static final RegistryObject<Block> RESTRICT = REGISTRY.register("restrict", () -> new RestrictBlock());
	public static final RegistryObject<Block> OBSTACLE_DOOR = REGISTRY.register("obstacle_door", () -> new ObstacleDoorBlock());
	public static final RegistryObject<Block> POWER_SWITCH = REGISTRY.register("power_switch", () -> new PowerSwitchBlock());
	public static final RegistryObject<Block> ACTIVATOR = REGISTRY.register("activator", () -> new ActivatorBlock());
	public static final RegistryObject<Block> ALPHA_ACTIVATOR = REGISTRY.register("alpha_activator", () -> new AlphaActivatorBlock());
	public static final RegistryObject<Block> ALPHA_RECEPTOR = REGISTRY.register("alpha_receptor", () -> new AlphaReceptorBlock());
	public static final RegistryObject<Block> BETA_ACTIVATOR = REGISTRY.register("beta_activator", () -> new BetaActivatorBlock());
	public static final RegistryObject<Block> BETA_RECEPTOR = REGISTRY.register("beta_receptor", () -> new BetaReceptorBlock());
	public static final RegistryObject<Block> OMEGA_ACTIVATOR = REGISTRY.register("omega_activator", () -> new OmegaActivatorBlock());
	public static final RegistryObject<Block> OMEGA_RECEPTOR = REGISTRY.register("omega_receptor", () -> new OmegaReceptorBlock());
	public static final RegistryObject<Block> ULTIMA_ACTIVATOR = REGISTRY.register("ultima_activator", () -> new UltimaActivatorBlock());
	public static final RegistryObject<Block> ULTIMA_RECEPTOR = REGISTRY.register("ultima_receptor", () -> new UltimaReceptorBlock());
	public static final RegistryObject<Block> SPAWNER_ZOMBIE = REGISTRY.register("spawner_zombie", () -> new SpawnerZombieBlock());
	public static final RegistryObject<Block> SPAWNER_CRAWLER = REGISTRY.register("spawner_crawler", () -> new SpawnerCrawlerBlock());
	public static final RegistryObject<Block> SPAWNER_DOG = REGISTRY.register("spawner_dog", () -> new SpawnerDogBlock());
	public static final RegistryObject<Block> TRAITOR = REGISTRY.register("traitor", () -> new TraitorBlock());
	public static final RegistryObject<Block> BUY_WALL_WEAPON = REGISTRY.register("buy_wall_weapon", () -> new BuyWallWeaponBlock());
	public static final RegistryObject<Block> PUNCH_PACK_CORPSE = REGISTRY.register("punch_pack_corpse", () -> new PunchPackCorpseBlock());
	public static final RegistryObject<Block> PUNCH_PACK = REGISTRY.register("punch_pack", () -> new PunchPackBlock());
	public static final RegistryObject<Block> PLAYER_SPAWNER = REGISTRY.register("player_spawner", () -> new PlayerSpawnerBlock());
	public static final RegistryObject<Block> DECO_FARMLAND = REGISTRY.register("deco_farmland", () -> new DecoFarmlandBlock());
	public static final RegistryObject<Block> DECO_DIRT = REGISTRY.register("deco_dirt", () -> new DecoDirtBlock());
	public static final RegistryObject<Block> DECO_GRASS = REGISTRY.register("deco_grass", () -> new DecoGrassBlock());
	public static final RegistryObject<Block> DECO_STONE = REGISTRY.register("deco_stone", () -> new DecoStoneBlock());
	public static final RegistryObject<Block> DECO_STONE_2 = REGISTRY.register("deco_stone_2", () -> new DecoStone2Block());
	public static final RegistryObject<Block> DECO_STONE_2_STAIRS = REGISTRY.register("deco_stone_2_stairs", () -> new DecoStone2StairsBlock());
	public static final RegistryObject<Block> DECO_STONE_2_SLAB = REGISTRY.register("deco_stone_2_slab", () -> new DecoStone2SlabBlock());
	public static final RegistryObject<Block> DECO_STONE_2_WALL = REGISTRY.register("deco_stone_2_wall", () -> new DecoStone2WallBlock());
	public static final RegistryObject<Block> DECO_PLANKS = REGISTRY.register("deco_planks", () -> new DecoPlanksBlock());
	public static final RegistryObject<Block> DECO_PLANKS_STAIRS = REGISTRY.register("deco_planks_stairs", () -> new DecoPlanksStairsBlock());
	public static final RegistryObject<Block> DECO_PLANKS_SLAB = REGISTRY.register("deco_planks_slab", () -> new DecoPlanksSlabBlock());
	public static final RegistryObject<Block> DECO_PLANKS_FENCE = REGISTRY.register("deco_planks_fence", () -> new DecoPlanksFenceBlock());
	public static final RegistryObject<Block> WHITEBRICK = REGISTRY.register("whitebrick", () -> new WhitebrickBlock());
	public static final RegistryObject<Block> WHITEBRICK_STAIRS = REGISTRY.register("whitebrick_stairs", () -> new WhitebrickStairsBlock());
	public static final RegistryObject<Block> WHITEBRICK_SLAB = REGISTRY.register("whitebrick_slab", () -> new WhitebrickSlabBlock());
	public static final RegistryObject<Block> WHITEBRICK_WALL = REGISTRY.register("whitebrick_wall", () -> new WhitebrickWallBlock());
	public static final RegistryObject<Block> RETRO_GRASS = REGISTRY.register("retro_grass", () -> new RetroGrassBlock());
	public static final RegistryObject<Block> RETRO_GRASS_SLAB = REGISTRY.register("retro_grass_slab", () -> new RetroGrassSlabBlock());
	public static final RegistryObject<Block> SORCHED_GRASS = REGISTRY.register("sorched_grass", () -> new SorchedGrassBlock());
	public static final RegistryObject<Block> SCORCHED_GRASS_SLAB = REGISTRY.register("scorched_grass_slab", () -> new ScorchedGrassSlabBlock());
	public static final RegistryObject<Block> SCORCHED_DIRT = REGISTRY.register("scorched_dirt", () -> new ScorchedDirtBlock());
	public static final RegistryObject<Block> SCORCHED_DIRT_SLAB = REGISTRY.register("scorched_dirt_slab", () -> new ScorchedDirtSlabBlock());
	public static final RegistryObject<Block> OLD_MOSSY_COBBLESTONE = REGISTRY.register("old_mossy_cobblestone", () -> new OldMossyCobblestoneBlock());
	public static final RegistryObject<Block> CARVED_SLATE = REGISTRY.register("carved_slate", () -> new CarvedSlateBlock());
	public static final RegistryObject<Block> CARVED_STONE = REGISTRY.register("carved_stone", () -> new CarvedStoneBlock());
	public static final RegistryObject<Block> RETRO_GRAVEL = REGISTRY.register("retro_gravel", () -> new RetroGravelBlock());
	public static final RegistryObject<Block> MESH = REGISTRY.register("mesh", () -> new MeshBlock());
	public static final RegistryObject<Block> PERMAFROST_GRASS = REGISTRY.register("permafrost_grass", () -> new PermafrostGrassBlock());
	public static final RegistryObject<Block> PERMAFROST_ICE = REGISTRY.register("permafrost_ice", () -> new PermafrostIceBlock());
	public static final RegistryObject<Block> WET_DIRT = REGISTRY.register("wet_dirt", () -> new WetDirtBlock());
	public static final RegistryObject<Block> RETRO_COBBLESTONE = REGISTRY.register("retro_cobblestone", () -> new RetroCobblestoneBlock());
	public static final RegistryObject<Block> RETRO_COBBLESTONE_STAIRS = REGISTRY.register("retro_cobblestone_stairs", () -> new RetroCobblestoneStairsBlock());
	public static final RegistryObject<Block> RETRO_COBBLESTONE_SLAB = REGISTRY.register("retro_cobblestone_slab", () -> new RetroCobblestoneSlabBlock());
	public static final RegistryObject<Block> RETRO_COBBLESTONE_WALL = REGISTRY.register("retro_cobblestone_wall", () -> new RetroCobblestoneWallBlock());
	public static final RegistryObject<Block> OLD_COBBLESTONE = REGISTRY.register("old_cobblestone", () -> new OldCobblestoneBlock());
	public static final RegistryObject<Block> OLD_COBBLESTONE_STAIRS = REGISTRY.register("old_cobblestone_stairs", () -> new OldCobblestoneStairsBlock());
	public static final RegistryObject<Block> OLD_COBBLESTONE_SLAB = REGISTRY.register("old_cobblestone_slab", () -> new OldCobblestoneSlabBlock());
	public static final RegistryObject<Block> OLD_COBBLESTONE_WALL = REGISTRY.register("old_cobblestone_wall", () -> new OldCobblestoneWallBlock());
	public static final RegistryObject<Block> BALSATIC_STONE = REGISTRY.register("balsatic_stone", () -> new BalsaticStoneBlock());
	public static final RegistryObject<Block> BALSATIC_STONE_STAIR = REGISTRY.register("balsatic_stone_stair", () -> new BalsaticStoneStairBlock());
	public static final RegistryObject<Block> BALSATIC_STONE_SLAB = REGISTRY.register("balsatic_stone_slab", () -> new BalsaticStoneSlabBlock());
	public static final RegistryObject<Block> BALSATIC_STONE_WALL = REGISTRY.register("balsatic_stone_wall", () -> new BalsaticStoneWallBlock());
	public static final RegistryObject<Block> RETRO_BRICK = REGISTRY.register("retro_brick", () -> new RetroBrickBlock());
	public static final RegistryObject<Block> RETRO_BRICK_STAIR = REGISTRY.register("retro_brick_stair", () -> new RetroBrickStairBlock());
	public static final RegistryObject<Block> RETRO_BRICK_SLAB = REGISTRY.register("retro_brick_slab", () -> new RetroBrickSlabBlock());
	public static final RegistryObject<Block> RETRO_BRICK_WALL = REGISTRY.register("retro_brick_wall", () -> new RetroBrickWallBlock());
	public static final RegistryObject<Block> BRICK_GRANITE = REGISTRY.register("brick_granite", () -> new BrickGraniteBlock());
	public static final RegistryObject<Block> BRICK_GRANITE_STAIR = REGISTRY.register("brick_granite_stair", () -> new BrickGraniteStairBlock());
	public static final RegistryObject<Block> BRICK_GRANITE_WALL = REGISTRY.register("brick_granite_wall", () -> new BrickGraniteWallBlock());
	public static final RegistryObject<Block> BRICK_GRANITE_SLAB = REGISTRY.register("brick_granite_slab", () -> new BrickGraniteSlabBlock());
	public static final RegistryObject<Block> BRICK_IRON = REGISTRY.register("brick_iron", () -> new BrickIronBlock());
	public static final RegistryObject<Block> BRICK_IRON_STAIR = REGISTRY.register("brick_iron_stair", () -> new BrickIronStairBlock());
	public static final RegistryObject<Block> BRICK_IRON_SLAB = REGISTRY.register("brick_iron_slab", () -> new BrickIronSlabBlock());
	public static final RegistryObject<Block> BRICK_IRON_WALL = REGISTRY.register("brick_iron_wall", () -> new BrickIronWallBlock());
	public static final RegistryObject<Block> BRICK_SLATE = REGISTRY.register("brick_slate", () -> new BrickSlateBlock());
	public static final RegistryObject<Block> BRICK_SLATE_STAIRS = REGISTRY.register("brick_slate_stairs", () -> new BrickSlateStairsBlock());
	public static final RegistryObject<Block> BRICK_SLATE_SLAB = REGISTRY.register("brick_slate_slab", () -> new BrickSlateSlabBlock());
	public static final RegistryObject<Block> BRICK_SLATE_WALL = REGISTRY.register("brick_slate_wall", () -> new BrickSlateWallBlock());
	public static final RegistryObject<Block> BRICK_STEEL = REGISTRY.register("brick_steel", () -> new BrickSteelBlock());
	public static final RegistryObject<Block> BRICK_STEEL_STAIRS = REGISTRY.register("brick_steel_stairs", () -> new BrickSteelStairsBlock());
	public static final RegistryObject<Block> BRICK_STEEL_SLAB = REGISTRY.register("brick_steel_slab", () -> new BrickSteelSlabBlock());
	public static final RegistryObject<Block> BRICK_STEEL_WALL = REGISTRY.register("brick_steel_wall", () -> new BrickSteelWallBlock());
	public static final RegistryObject<Block> BRICK_STONE = REGISTRY.register("brick_stone", () -> new BrickStoneBlock());
	public static final RegistryObject<Block> BRICK_STONE_STAIRS = REGISTRY.register("brick_stone_stairs", () -> new BrickStoneStairsBlock());
	public static final RegistryObject<Block> BRICK_STONE_SLAB = REGISTRY.register("brick_stone_slab", () -> new BrickStoneSlabBlock());
	public static final RegistryObject<Block> BRICK_STONE_WALL = REGISTRY.register("brick_stone_wall", () -> new BrickStoneWallBlock());
	public static final RegistryObject<Block> STEEL_SLATE = REGISTRY.register("steel_slate", () -> new SteelSlateBlock());
	public static final RegistryObject<Block> STEEL_SLATE_SLAB = REGISTRY.register("steel_slate_slab", () -> new SteelSlateSlabBlock());
	public static final RegistryObject<Block> PLANKSBLACK = REGISTRY.register("planksblack", () -> new PlanksblackBlock());
	public static final RegistryObject<Block> PLANKS_BLACK_STAIRS = REGISTRY.register("planks_black_stairs", () -> new PlanksBlackStairsBlock());
	public static final RegistryObject<Block> PLANKS_BLACK_FENCE = REGISTRY.register("planks_black_fence", () -> new PlanksBlackFenceBlock());
	public static final RegistryObject<Block> PLANKS_BLUE = REGISTRY.register("planks_blue", () -> new PlanksBlueBlock());
	public static final RegistryObject<Block> PLANKS_BLUE_STAIRS = REGISTRY.register("planks_blue_stairs", () -> new PlanksBlueStairsBlock());
	public static final RegistryObject<Block> PLANKS_BLUE_FENCE = REGISTRY.register("planks_blue_fence", () -> new PlanksBlueFenceBlock());
	public static final RegistryObject<Block> PLANKS_BROWN = REGISTRY.register("planks_brown", () -> new PlanksBrownBlock());
	public static final RegistryObject<Block> PLANKS_BROWN_STAIRS = REGISTRY.register("planks_brown_stairs", () -> new PlanksBrownStairsBlock());
	public static final RegistryObject<Block> PLANKS_BROWN_FENCE = REGISTRY.register("planks_brown_fence", () -> new PlanksBrownFenceBlock());
	public static final RegistryObject<Block> PLANKS_CYAN = REGISTRY.register("planks_cyan", () -> new PlanksCyanBlock());
	public static final RegistryObject<Block> PLANKS_CYAN_STAIRS = REGISTRY.register("planks_cyan_stairs", () -> new PlanksCyanStairsBlock());
	public static final RegistryObject<Block> PLANKS_CYAN_FENCE = REGISTRY.register("planks_cyan_fence", () -> new PlanksCyanFenceBlock());
	public static final RegistryObject<Block> PLANKS_GRAY = REGISTRY.register("planks_gray", () -> new PlanksGrayBlock());
	public static final RegistryObject<Block> PLANKS_GRAY_STAIRS = REGISTRY.register("planks_gray_stairs", () -> new PlanksGrayStairsBlock());
	public static final RegistryObject<Block> PLANKS_GRAY_FENCE = REGISTRY.register("planks_gray_fence", () -> new PlanksGrayFenceBlock());
	public static final RegistryObject<Block> OLD_PLANKS = REGISTRY.register("old_planks", () -> new OldPlanksBlock());
	public static final RegistryObject<Block> OLD_PLANKS_STAIRS = REGISTRY.register("old_planks_stairs", () -> new OldPlanksStairsBlock());
	public static final RegistryObject<Block> OLD_PLANKS_FENCE = REGISTRY.register("old_planks_fence", () -> new OldPlanksFenceBlock());
	public static final RegistryObject<Block> PLANKS_ORANGE = REGISTRY.register("planks_orange", () -> new PlanksOrangeBlock());
	public static final RegistryObject<Block> PLANKS_ORANGE_STAIRS = REGISTRY.register("planks_orange_stairs", () -> new PlanksOrangeStairsBlock());
	public static final RegistryObject<Block> PLANKS_ORANGE_FENCE = REGISTRY.register("planks_orange_fence", () -> new PlanksOrangeFenceBlock());
	public static final RegistryObject<Block> PLANKS_PINK = REGISTRY.register("planks_pink", () -> new PlanksPinkBlock());
	public static final RegistryObject<Block> PLANKS_PINK_STAIRS = REGISTRY.register("planks_pink_stairs", () -> new PlanksPinkStairsBlock());
	public static final RegistryObject<Block> PLANKS_PINK_FENCE = REGISTRY.register("planks_pink_fence", () -> new PlanksPinkFenceBlock());
	public static final RegistryObject<Block> PLANKS_RED = REGISTRY.register("planks_red", () -> new PlanksRedBlock());
	public static final RegistryObject<Block> PLANKS_RED_STAIRS = REGISTRY.register("planks_red_stairs", () -> new PlanksRedStairsBlock());
	public static final RegistryObject<Block> PLANKS_RED_FENCE = REGISTRY.register("planks_red_fence", () -> new PlanksRedFenceBlock());
	public static final RegistryObject<Block> PLANKS_WHITE = REGISTRY.register("planks_white", () -> new PlanksWhiteBlock());
	public static final RegistryObject<Block> PLANKS_WHITE_STAIRS = REGISTRY.register("planks_white_stairs", () -> new PlanksWhiteStairsBlock());
	public static final RegistryObject<Block> PLANKS_WHITE_FENCE = REGISTRY.register("planks_white_fence", () -> new PlanksWhiteFenceBlock());
	public static final RegistryObject<Block> PLANKS_SILVER = REGISTRY.register("planks_silver", () -> new PlanksSilverBlock());
	public static final RegistryObject<Block> PLANKS_SILVER_STAIRS = REGISTRY.register("planks_silver_stairs", () -> new PlanksSilverStairsBlock());
	public static final RegistryObject<Block> PLANKS_SILVER_FENCE = REGISTRY.register("planks_silver_fence", () -> new PlanksSilverFenceBlock());
	public static final RegistryObject<Block> PLANKS_YELLOW = REGISTRY.register("planks_yellow", () -> new PlanksYellowBlock());
	public static final RegistryObject<Block> PLANKS_YELLOW_STAIRS = REGISTRY.register("planks_yellow_stairs", () -> new PlanksYellowStairsBlock());
	public static final RegistryObject<Block> PLANKS_YELLOW_FENCE = REGISTRY.register("planks_yellow_fence", () -> new PlanksYellowFenceBlock());
	public static final RegistryObject<Block> RETRO_GLASS = REGISTRY.register("retro_glass", () -> new RetroGlassBlock());
	public static final RegistryObject<Block> RETRO_GLASS_SLAB = REGISTRY.register("retro_glass_slab", () -> new RetroGlassSlabBlock());
	public static final RegistryObject<Block> RETRO_GLASS_PANE = REGISTRY.register("retro_glass_pane", () -> new RetroGlassPaneBlock());
	public static final RegistryObject<Block> GLASS_STEEL = REGISTRY.register("glass_steel", () -> new GlassSteelBlock());
	public static final RegistryObject<Block> GLASS_STEEL_SLAB = REGISTRY.register("glass_steel_slab", () -> new GlassSteelSlabBlock());
	public static final RegistryObject<Block> GLASS_STEEL_PANE = REGISTRY.register("glass_steel_pane", () -> new GlassSteelPaneBlock());
	public static final RegistryObject<Block> GLASS_TINTED = REGISTRY.register("glass_tinted", () -> new GlassTintedBlock());
	public static final RegistryObject<Block> GLASS_TINTED_SLAB = REGISTRY.register("glass_tinted_slab", () -> new GlassTintedSlabBlock());
	public static final RegistryObject<Block> GLASS_TINTED_PANE = REGISTRY.register("glass_tinted_pane", () -> new GlassTintedPaneBlock());
	public static final RegistryObject<Block> DARKBRICK = REGISTRY.register("darkbrick", () -> new DarkbrickBlock());
	public static final RegistryObject<Block> DARKBRICK_STAIRS = REGISTRY.register("darkbrick_stairs", () -> new DarkbrickStairsBlock());
	public static final RegistryObject<Block> DARKBRICK_SLAB = REGISTRY.register("darkbrick_slab", () -> new DarkbrickSlabBlock());
	public static final RegistryObject<Block> DARKBRICK_WALL = REGISTRY.register("darkbrick_wall", () -> new DarkbrickWallBlock());
	public static final RegistryObject<Block> DARKBRICKVARIATION = REGISTRY.register("darkbrickvariation", () -> new DarkbrickvariationBlock());
	public static final RegistryObject<Block> OPAQUE_LEAVES = REGISTRY.register("opaque_leaves", () -> new OpaqueLeavesBlock());
	public static final RegistryObject<Block> PURPLEWALLPAPER = REGISTRY.register("purplewallpaper", () -> new PurplewallpaperBlock());
	public static final RegistryObject<Block> SEWERBRICK = REGISTRY.register("sewerbrick", () -> new SewerbrickBlock());
	public static final RegistryObject<Block> SEWERBRICK_STAIRS = REGISTRY.register("sewerbrick_stairs", () -> new SewerbrickStairsBlock());
	public static final RegistryObject<Block> SEWERBRICK_SLAB = REGISTRY.register("sewerbrick_slab", () -> new SewerbrickSlabBlock());
	public static final RegistryObject<Block> SEWERBRICK_WALL = REGISTRY.register("sewerbrick_wall", () -> new SewerbrickWallBlock());
	public static final RegistryObject<Block> SQUAREFLOOR = REGISTRY.register("squarefloor", () -> new SquarefloorBlock());
	public static final RegistryObject<Block> SQUAREFLOOR_SLAB = REGISTRY.register("squarefloor_slab", () -> new SquarefloorSlabBlock());
	public static final RegistryObject<Block> MYSTERY_BOX = REGISTRY.register("mystery_box", () -> new MysteryBoxBlock());
	public static final RegistryObject<Block> EMPTYMYSTERYBOX = REGISTRY.register("emptymysterybox", () -> new EmptymysteryboxBlock());
	public static final RegistryObject<Block> TILE_BLOCK = REGISTRY.register("tile_block", () -> new TileBlockBlock());
	public static final RegistryObject<Block> MODERN_FURNACE = REGISTRY.register("modern_furnace", () -> new ModernFurnaceBlock());
	public static final RegistryObject<Block> MACHINE_BLOCK = REGISTRY.register("machine_block", () -> new MachineBlockBlock());
	public static final RegistryObject<Block> ZOMBIE_PASS = REGISTRY.register("zombie_pass", () -> new ZombiePassBlock());
	public static final RegistryObject<Block> OBSCURIUM = REGISTRY.register("obscurium", () -> new ObscuriumBlock());
	public static final RegistryObject<Block> RAW_OBSCURIUM = REGISTRY.register("raw_obscurium", () -> new RawObscuriumBlock());
	public static final RegistryObject<Block> MUD = REGISTRY.register("mud", () -> new MudBlock());
	public static final RegistryObject<Block> MUD_2 = REGISTRY.register("mud_2", () -> new Mud2Block());
	public static final RegistryObject<Block> WUNDERFIZZ_ANTENNE = REGISTRY.register("wunderfizz_antenne", () -> new WunderfizzAntenneBlock());
	public static final RegistryObject<Block> DER_WUNDERFIZZ = REGISTRY.register("der_wunderfizz", () -> new DerWunderfizzBlock());
	public static final RegistryObject<Block> DER_WUNDERFIZZ_UPPER = REGISTRY.register("der_wunderfizz_upper", () -> new DerWunderfizzUpperBlock());
	public static final RegistryObject<Block> IRON_STAIRS = REGISTRY.register("iron_stairs", () -> new IronStairsBlock());
	public static final RegistryObject<Block> IRON_SLABS = REGISTRY.register("iron_slabs", () -> new IronSlabsBlock());
	public static final RegistryObject<Block> AMMO_CRATE = REGISTRY.register("ammo_crate", () -> new AmmoCrateBlock());
	public static final RegistryObject<Block> EYE_OAK = REGISTRY.register("eye_oak", () -> new EyeOakBlock());
	public static final RegistryObject<Block> SUSPICIOUS_HAUNTED_PLANKS = REGISTRY.register("suspicious_haunted_planks", () -> new SuspiciousHauntedPlanksBlock());
	public static final RegistryObject<Block> HAUNTED_PLANKS = REGISTRY.register("haunted_planks", () -> new HauntedPlanksBlock());
	public static final RegistryObject<Block> HAUNTED_GLASS = REGISTRY.register("haunted_glass", () -> new HauntedGlassBlock());
	public static final RegistryObject<Block> BLACK_IRON_DOOR = REGISTRY.register("black_iron_door", () -> new BlackIronDoorBlock());
	public static final RegistryObject<Block> BLACK_IRON_FENCE = REGISTRY.register("black_iron_fence", () -> new BlackIronFenceBlock());
	public static final RegistryObject<Block> BLACK_DIRT = REGISTRY.register("black_dirt", () -> new BlackDirtBlock());
	public static final RegistryObject<Block> BLACK_COARSED_DIRT = REGISTRY.register("black_coarsed_dirt", () -> new BlackCoarsedDirtBlock());
	public static final RegistryObject<Block> BLACK_PUMPKIN = REGISTRY.register("black_pumpkin", () -> new BlackPumpkinBlock());
	public static final RegistryObject<Block> COBBLED_AND_STONED = REGISTRY.register("cobbled_and_stoned", () -> new CobbledAndStonedBlock());
	public static final RegistryObject<Block> CRACKED_SHADOWED_BRICK = REGISTRY.register("cracked_shadowed_brick", () -> new CrackedShadowedBrickBlock());
	public static final RegistryObject<Block> CRACKED_SHADOWED_TILES = REGISTRY.register("cracked_shadowed_tiles", () -> new CrackedShadowedTilesBlock());
	public static final RegistryObject<Block> FEL_BRICKS = REGISTRY.register("fel_bricks", () -> new FelBricksBlock());
	public static final RegistryObject<Block> PERFECT_DIORITE = REGISTRY.register("perfect_diorite", () -> new PerfectDioriteBlock());
	public static final RegistryObject<Block> PERFECT_GRANITE = REGISTRY.register("perfect_granite", () -> new PerfectGraniteBlock());
	public static final RegistryObject<Block> PERFECT_ANDESIT = REGISTRY.register("perfect_andesit", () -> new PerfectAndesitBlock());
	public static final RegistryObject<Block> PERFECTED_DIORITE = REGISTRY.register("perfected_diorite", () -> new PerfectedDioriteBlock());
	public static final RegistryObject<Block> PERFECTED_GRANITE = REGISTRY.register("perfected_granite", () -> new PerfectedGraniteBlock());
	public static final RegistryObject<Block> PERFECTED_ANDESIT = REGISTRY.register("perfected_andesit", () -> new PerfectedAndesitBlock());
	public static final RegistryObject<Block> SHADOW_BRICKS = REGISTRY.register("shadow_bricks", () -> new ShadowBricksBlock());
	public static final RegistryObject<Block> SHADOW_TILES = REGISTRY.register("shadow_tiles", () -> new ShadowTilesBlock());
	public static final RegistryObject<Block> TINY_CANDLES = REGISTRY.register("tiny_candles", () -> new TinyCandlesBlock());
	public static final RegistryObject<Block> TINY_BONES = REGISTRY.register("tiny_bones", () -> new TinyBonesBlock());
	public static final RegistryObject<Block> TINY_FLAME = REGISTRY.register("tiny_flame", () -> new TinyFlameBlock());
	public static final RegistryObject<Block> TINY_SKULL = REGISTRY.register("tiny_skull", () -> new TinySkullBlock());
	public static final RegistryObject<Block> SPIDER_WEB = REGISTRY.register("spider_web", () -> new SpiderWebBlock());
	public static final RegistryObject<Block> WEIRD_GRASS = REGISTRY.register("weird_grass", () -> new WeirdGrassBlock());
	public static final RegistryObject<Block> SOUL_LICHEN = REGISTRY.register("soul_lichen", () -> new SoulLichenBlock());
	public static final RegistryObject<Block> NOT_HAUNTED_GLASS = REGISTRY.register("not_haunted_glass", () -> new NotHauntedGlassBlock());
	public static final RegistryObject<Block> HAUNTED_WINDOW = REGISTRY.register("haunted_window", () -> new HauntedWindowBlock());
	public static final RegistryObject<Block> PERKS_LOWER = REGISTRY.register("perks_lower", () -> new PerksLowerBlock());

	@Mod.EventBusSubscriber(bus = Mod.EventBusSubscriber.Bus.MOD, value = Dist.CLIENT)
	public static class ClientSideHandler {
		@SubscribeEvent
		public static void blockColorLoad(RegisterColorHandlersEvent.Block event) {
			DecoGrassBlock.blockColorLoad(event);
			OpaqueLeavesBlock.blockColorLoad(event);
			WeirdGrassBlock.blockColorLoad(event);
		}

		@SubscribeEvent
		public static void itemColorLoad(RegisterColorHandlersEvent.Item event) {
			DecoGrassBlock.itemColorLoad(event);
		}
	}
}
